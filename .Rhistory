x <- 1:10
if(x > 5) {
x <- 0
}
install.packages("wordcloud")
?debug
m<-matrix(1:4,2,2)
class(m)
?solve
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(m)
cacheSolve(m)
m <- makeCacheMatrix(m)
n<-matrix(1:4,2,2)
cacheSolve(m)
M<-makeCacheMatrix(1:4,2,2)
M<-makeCacheMatrix(1:4)
M
cacheSolve(M)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m<-matrix(1:4,2,2)
n<-makeCacheMatrix(m)
cacheSolve(n)
solve(m)
cacheSolve(n)
g<-makeCacheMatrix(m)
cacheSolve(g)
cacheSolve(n)
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
install.packages("RMySQL",type="source")
install.packages("RMySQL",type="source")
library(swirl)
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
head(top_counts,20)
?arrange
arrange(top_counts,desc(count))
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(by_package,unique>465)
top_unique<-filter(pack_sum,unique>465)
top_unique
arrange(top_unique,desc(unique))
submit()
submit()
?chain
submit()
submit()
submit()
submit()
submit()
?select
?chain
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students1
students2
res<-gather(students2,sex_class,count)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res, sex_class, c("sex","class"))
submit()
submit()
students3
submit()
?gather
submit()
submit()
?spread
submit()
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed<-mutate(passed, status="passed")
failed<-mutate(failed, status="failed")
?rbind_list
rbind_list(passed,failed)
sat
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=T)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment,hours=hour(now()),minutes=minutes(now()))
this_moment<-update(this_moment,hours=22,minutes=08)
this_moment
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17,minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
library(dplyr)
library(tidyr)
getwd
getwd()
setwd("G:/Data cleaning")
getwd()
data<-read.csv("./Full breakdown 2013-2014.csv")
data_df<-tbl_df(data)
data_df
data_df<-select(data_df,-X)
data_df
?mutate
?tidyr
help(package="tidyr")
help(package="dplyr")
data_2013<-select(data_df,Year==2013)
data_2013<-filter(data_df,Year==2013)
summarise(data_2013,mean(Year))
data_2014<-filter(data_df,Year==2014)
?group_by
group_by(data_2014,SAP_Hotel,Month,Segment)
data_2014<-group_by(data_2014,SAP_Hotel,Month,Segment)
data_2013<-group_by(data_2013,SAP_Hotel,Month,Segment)
data_2013
head(data_2014,n=20)
head(data_2014,n=40)
?spead
?spread
gather(data_2014,Year,Month)
data_df
?paste
data_df<-mutate(data_df,Index=paste(SAP_Hotel,Year,Month,sep="_"))
data_df
data_df$Index
data_df
data_df<-mutate(data_df,Index=paste(SAP_Hotel,Month,Year,sep="_"))
head(data_df$Index)
data_df<-mutate(data_df,Index=paste(SAP_Hotel,Year,Month,Segment,sep="_"))
head(data_df$Index)
?where
data_2014<-mutate(data_2014,Index=paste(SAP_Hotel,Year,Month,Segment,sep="_"))
head(data_2014$Index)
data_2013<-mutate(data_2013,Index=paste(SAP_Hotel,Year,Month,Segment,sep="_"))
rm(data)
data_2014<-mutate(data_2014,GR_LY_Actual=data_2013$GR_TY_Actual[Index==paste(SAP_Hotel,Year,"2013",Month,Segment,sep="_")])
data_2014<-mutate(data_2014,GR_LY_Actual=data_2013$GR_TY_Actual["Index"==paste(SAP_Hotel,Year,"2013",Month,Segment,sep="_")])
data_2014<-mutate(data_2014,Index_LY=paste(SAP_Hotel,"2013",Month,Segment,sep="_"))
head(data_2014$Index_LY)
?cbind
data_2014<-mutate(data_2014,GR_LY_Actual=data_2013$GR_TY_Actual[Index==Index_LY])
data_2014<-mutate(data_2014,GR_LY_Actual=data_2013$GR_TY_Actual["Index"==Index_LY])
data_2014<-mutate(data_2014,GR_LY_Actual=data_2013$GR_TY_Actual["Index"=="Index_LY"])
data_2014<-mutate(data_2014,GR_LY_Actual=data_2013$GR_TY_Actual[[Index==Index_LY]])
?sapply
data_combined<-cbind(data_2014,data_2013[,4:9])
data_combined<-cbind(data_2014,data_2013[,4:11])
data_combined
tbl_df(data_combined)
data_combined
data_combined<-tbl_df(data_combined)
names(data_combined)
data_combined<-select(data_combined,-Index_LY)
data_combined<-select(data_combined,-12)
names(data_combined)
names(data_combined[,12])="GR_LY_Actual"
names(data_combined)
?mutate
select(data_combined,12="GR_LY_Actual")
?renaming
??renaming
?name
?names
data_combined
head(data_combined[,12])
names(data_combined)[12]<-"GR_LY_Actual"
data_combined
names(data_combined)[13]<-"GR_LY_Budget"
names(data_combined)[13]<-"RN_LY_Actual"
names(data_combined)[13]<-"RN_LY_Budget"
names(data_combined)[13]<-"GR_LY_Budget"
names(data_combined)[14]<-"RN_LY_Actual"
names(data_combined)[15]<-"RN_LY_Budget"
names(data_combined)[16]<-"RR_LY_Actual_LC"
names(data_combined)[17]<-"RR_LY_Budget_LC"
names(data_combined)[18]<-"Index_LY"
names(data_combined)
data_combined<-mutate(data_combined,Check=Index==Index_LY)
summarise(data_combined,Check)
?write.csv
write.csv(data_combined,file="./Combined 2013-2014.csv")
write.csv(data_combined,file="Combined 2013-2014.csv")
write.csv(data_combined,file="Combined 2013-2014.csv",row.names=F)
write.table(data_combined,file="Combined 2013-2014.csv",row.names=F,sep=",")
getwd()
write.csv(data_combined,file="./Combined 2013-2014.csv",row.names=F)
write.csv(data_combined,file="Combined 2013-2014.csv",row.names=F)
setwd("~")
getwd()
write.csv(data_combined,file="Combined 2013-2014.csv",row.names=F)
head(data_2013$Index)
data_combined<-cbind(data_2014,data_2013[,4:10])
data_2013[,4:10]
data_2013[,5:10]
data_2013[,5:11]
data_combined<-cbind(data_2014,data_2013[,5:11])
data_combined<-tbl_df(data_combined)
data_combined
names(data_combined)
head(data_combined[,19])
data_combined<-select(data_combined,-Index_LY)
names(data_combined)[12]<-"GR_LY_Actual"
names(data_combined)[13]<-"GR_LY_Budget"
names(data_combined)[14]<-"RN_LY_Actual"
names(data_combined)[15]<-"RN_LY_Budget"
names(data_combined)[16]<-"RR_LY_Actual_LC"
names(data_combined)[17]<-"RR_LY_Budget_LC"
names(data_combined)[18]<-"Index_LY"
data_combined<-cbind(data_combined,data_2014$Index_LY)
data_combined
data_combined<-tbl_df(data_combined)
data_combined
data_combined<-select(data_combined,-19)
data_combined
data_combined<-mutate(data_combined,Index_LY2=paste(SAP_Hotel,"2013",Month,Segment,sep="_"))
data_combined<-mutate(data_combined,Check=Index_LY==IndexLY2)
data_combined
data_combined<-mutate(data_combined,Check=Index_LY==Index_LY2)
write.csv(data_combined,file="Combined 2013-2014.csv",row.names=F)
names(data_2013)
names(data_2013)[5]<-"GR_LY_Actual"
names(data_2013)[6]<-"GR_LY_Budget"
names(data_2013)[7]<-"RN_LY_Actual"
names(data_2013)[8]<-"RN_LY_Budget"
names(data_2013)[9]<-"RR_LY_Actual_LC"
names(data_2013)[10]<-"RR_LY_Budget_LC"
names(data_2013)[11]<-"Index"
names(data_2013)[11]<-"Index_LY2"
data_2013
data_combined<-cbind(data_2014,data_2013[,5:11])
data_combined<-tbl_df(cbind(data_2014,data_2013[,5:11]))
data_combined
data_combined<-mutate(data_combined,Check=Index_LY==Index_LY2)
write.csv(data_combined,file="Combined 2013-2014.csv",row.names=F)
?rm
load("~/Documents - Work/MOOC Data Analytics Course/Class 3 - Getting and Cleaning Data/Quiz 3/.RData")
View(`q3.data1`)
q3.data1<-q3.data1[1:190,]
q3.data1
q3.data1<-tbl_df(q3.data1)
library(dplyr)
library(tidyr)
q3.data1<-tbl_df(q3.data1)
q3.data1
table(q3.data1$CountryCode %in% q3.data2$CountryCode)
q3.merged<-merge(q3.data1,q3.data2,by.x="CountryCode",by.y="CountryCode")
q3.merged<-merge(q3.data1,q3.data2,by.x="CountryCode",by.y="CountryCode",all=T)
q3.merged<-tbl_df(q3.merged)
q3.merged
?arrange
q3.merged<-arrange(q3.merged,desc(Ranking))
q3.merged
View(`q3.merged`)
q3.merged<-mutate(q3.merged, Ranking=as.numeric(Ranking))
q3.merged
View(`q3.merged`)
q3.merged<-merge(q3.data1,q3.data2,by.x="CountryCode",by.y="CountryCode")
q3.merged<-tbl_df(q3.merged)
q3.merged
class(q3.merged$Ranking)
q3.merged<-mutate(q3.merged, Ranking2=as.numeric(Ranking))
head(q3.merged$Ranking2)
View(`q3.merged`)
q3.merged<-merge(q3.data2,q3.data1,by.x="CountryCode",by.y="CountryCode")
q3.merged<-merge(q3.data2,q3.data1,by.x="CountryCode",by.y="CountryCode",all=T)
View(`q3.merged`)
q3.merged<-merge(q3.data1,q3.data2,by.x="CountryCode",by.y="CountryCode",all=T)
?subset
?!=
?is.na
?select
View(`q3.merged`)
View(`q3.merged`)
q3.merged<-filter(q3.merged,Ranking!=NA)
q3.merged<-merge(q3.data1,q3.data2,by.x="CountryCode",by.y="CountryCode",all=T)
??comparison
q3.merged<-filter(q3.merged,-is.na(Ranking))
q3.merged<-filter(q3.merged,!is.na(Ranking))
q3.merged<-tbl_df(q3.merged)
q3.merged
class(q3.merged$Ranking)
q3.cleaned<-mutate(q3.merged, Ranking2=as.numeric(Ranking))
q3.cleaned
View(`q3.cleaned`)
arrange(q3.merged,desc(Ranking))
q3.cleaned<-mutate(q3.merged, Ranking2=as.int(Ranking))
q3.cleaned<-mutate(q3.merged, Ranking2=as.integer(Ranking))
View(`q3.cleaned`)
q3.cleaned<-mutate(q3.merged, Ranking2=Ranking*1)
q3.cleaned<-mutate(q3.merged, Ranking2=Ranking+1)
q3.cleaned<-mutate(q3.merged, Ranking2=as.numeric(levels(Ranking))[Ranking])
q3.cleaned<-mutate(q3.merged, Ranking2=as.character(Ranking))
q3.cleaned<-mutate(q3.merged, Ranking2=as.numeric(Ranking2))
q3.cleaned<-mutate(q3.cleaned, Ranking2=as.numeric(Ranking2))
View(`q3.cleaned`)
View(`q3.merged`)
q3.cleaned<-arrange(q3.cleaned,desc(Ranking2))
head(q3.cleaned)
q3.cleaned[13,]
group_by
?group_by
View(`q3.cleaned`)
q3.cleaned<-group_by(q3.cleaned,Income.Group)
q3.cleaned
View(`q3.cleaned`)
View(`q3.cleaned`)
summarise(q3.cleaned,mean(Ranking))
View(`q3.merged`)
summarise(q3.cleaned,mean(Ranking2))
install.packages("Hmisc")
library(Hmisc)
q3.cleaned<-mutate(q3.cleaned,RankGroup=cut2(Ranking,g=5))
q3.cleaned<-mutate(q3.cleaned,RankGroup=cut2(Ranking2,g=5))
table(q3.cleaned$RankGroup,q3.cleaned$Income.Group)
?cut2
q3.cleaned<-select(q3.cleaned,-RankGroup)
View(`q3.cleaned`)
class(q3.cleaned$Ranking2)
q3.cleaned2<-mutate(q3.cleaned,RankGroup=cut2(Ranking2,g=5))
table(q3.cleaned2$RankGroup)
40+38+38+38+36
q3.cleaned2<-mutate(q3.cleaned,RankGroup=cut2(Ranking2,g=5,m=38))
table(q3.cleaned2$RankGroup)
q3.cleaned2<-mutate(q3.cleaned,RankGroup=cut2(Ranking2,m=38))
table(q3.cleaned2$RankGroup)
q3.cleaned2$RankGroup <- cut2(q3.cleaned2$Ranking2, g=5)
table(q3.cleaned2$RankGroup)
table(q3.cleaned2$RankGroup,q3.cleaned2$Income.Group)
install.packages("caret")
99/(99+999)
require(installr)
require(updateR)
installr()
install.packages("manipulate")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
rm("testing",trainIndex,training)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(concrete)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
require(Hmisc)
?cut2
head(inTrain)
?qplot
qplot(CompressiveStrength,inTrain)
qplot(mixtures$CompressiveStrength,inTrain)
View(training)
qplot(row.names,CompressiveStrength,training)
hist(training$SuperPlasticizer)
?hist
hist(training$Superplasticizer)
summary(training$Superplasticizer)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?grep
grep("^IL",names(training))
names(training)[grep("^IL",names(training))]
varind<-grep("^IL",names(training))
preProc<-preProcess(training(,varind),method="pca",pcaComp=2)
require(caret)
preProc<-preProcess(training[,varind],method="pca",pcaComp=2)
View(training)
trainPC <- predict(preProc,training[,varind])
View(training)
modelFit <- train(training$diagnosis~training[,varind],method="glm",data=trainPC)
preProc
trainPC
training2<-training[,c(1,varind)]
view(training2)
View(training2)
preProc<-preProcess(training2[,-1],method="pca",pcaComp=2)
trainPC <- predict(preProc,training2[,-1])
modelFit <- train(training2$diagnosis~.,method="glm",data=trainPC)
install.packages("caret")
install.packages("caret")
modelFit <- train(training2$diagnosis~.,method="glm",data=trainPC)
require(caret)
install.packages("caret",dependencies=T)
install.packages("caret", dependencies = T)
require(caret)
modelFit <- train(training2$diagnosis~.,method="glm",data=trainPC)
confusionMatrix(training2$diagnosis,predict(modelFit,trainPC))
preProc<-preProcess(training2[,-1],method="pca",pcaComp=3)
trainPC <- predict(preProc,training2[,-1])
modelFit <- train(training2$diagnosis~.,method="glm",data=trainPC)
confusionMatrix(training2$diagnosis,predict(modelFit,trainPC))
preProc<-preProcess(training2[,-1],method="pca",pcaComp=8)
trainPC <- predict(preProc,training2[,-1])
modelFit <- train(training2$diagnosis~.,method="glm",data=trainPC)
confusionMatrix(training2$diagnosis,predict(modelFit,trainPC))
preProc<-preProcess(training2[,-1],method="pca",pcaComp=12)
trainPC <- predict(preProc,training2[,-1])
modelFit <- train(training2$diagnosis~.,method="glm",data=trainPC)
confusionMatrix(training2$diagnosis,predict(modelFit,trainPC))
?preProcess
preProc<-preProcess(training2[,-1],method="pca",thresh=.8)
preProc
?predict
?train
testing2<-testing[,c(1,varind)]
View(testing2)
testPC<-predict(preProc,testing[,-1])
View(testing)
testPC<-predict(preProc,testing2[,-1])
trainPC<-predict(preProc,training2[,-1])
modelFit<-train(training2$diagnosis~.,method="glm",data=trainPC)
testPC<-predict(preProc,testing2[,-1])
confusionMatrix(testing2$diagnosis,predict(modelFit,testPC))
?predict
modelFit2<-train(training2$diagnosis~.,method="glm",data=training2)
confusionMatrix(testing2$diagnosis,predict(modelFit,testing2))
?train
?predict
confusionMatrix(testing2$diagnosis,predict(modelFit))
confusionMatrix(testing2$diagnosis,predict(modelFit,testing2))
confusionMatrix(testing2$diagnosis,predict(modelFit2,testing2))
source('~/GitHub/Class-8-Course-Project/C8-CP-Scripting.R')
conmatRF
source('~/GitHub/Class-8-Course-Project/C8-CP-Scripting.R')
conmatRF
source('~/GitHub/Class-8-Course-Project/C8-CP-Scripting.R')
